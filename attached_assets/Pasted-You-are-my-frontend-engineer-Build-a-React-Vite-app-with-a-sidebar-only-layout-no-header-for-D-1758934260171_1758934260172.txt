You are my frontend engineer. Build a React (Vite) app with a sidebar-only layout (no header) for “DashValidator”.
The UI implements a Validator flow under /validator and a Database admin section with CSV import/export and dynamic custom fields driven by a field catalog. It must work against the backend spec below.

# 0) Tech
- React + Vite + TypeScript
- react-router-dom
- @tanstack/react-query
- axios (with baseURL + auth interceptor)
- zod + @hookform/resolvers + react-hook-form
- Tailwind CSS (init + basic config)
- lucide-react (icons)
- recharts (charts)
- dayjs
- jotai (small global atoms if needed)

# 1) Env
- .env: VITE_API_BASE_URL=http://localhost:8000
- Axios uses this base URL; token stored in memory (react state) for dev.

# 2) Routing (sidebar only; no header)
Top-level:
- `/` -> Dashboard
- `/validator/*`
- `/database/*`
- `/settings`
- `*` -> NotFound

Sidebar items (exactly):
- Dashboard
- Validator (expandable)
  - Upload
  - Runs
  - Analytics
- Database (expandable)
  - Codes
  - Contexts
  - Establishments
  - Rules
- Settings

Validator:
- `/validator` -> redirect to `/validator/upload`
- `/validator/upload`
- `/validator/runs`
- `/validator/runs/:id`
- `/validator/analytics`

Database:
- `/database` -> redirect to `/database/codes`
- `/database/codes`
- `/database/contexts`
- `/database/establishments`
- `/database/rules`

# 3) Pages (skeletons fully wired to API)
## Dashboard `/`
- KPI trio (Invoices/day, Avg invoice value, Avg daily total) via `GET /analytics/kpis?from&to` (backend stub ok).
- Recent runs (last 5) via `GET /validations?limit=5` (handle empty state).

## Validator
### Upload `/validator/upload`
- Drag/drop CSV -> `POST /files`, then `POST /validations {fileId}`.
- On success, show “View run” button -> `/validator/runs/:id`.
- Show progress state (poll stub if needed).

### Runs `/validator/runs`
- Table: Date, File, Status, Rows, Issues, Actions(View).
- Filters: status, date range, search by name.
- Data: `GET /validations?status&from&to&search&page&pageSize`.

### Run details `/validator/runs/:id`
- Header with status badge; summary cards; issues table (expandable).
- If status running, poll every 2–3s until terminal.

### Analytics `/validator/analytics`
- Filters: date range (required), Doctor (multi), Establishment (multi).
- Charts with recharts: unique patients/day (line), code usage (bar), revenue totals (area).
- Data:
  - `GET /analytics/unique-patients-by-day?from&to&doctor&est`
  - `GET /analytics/codes?from&to&doctor&est`
  - `GET /analytics/kpis?from&to`
- Export CSV of current filters (client-side from response or via backend route if available).

## Database (shared UX across 4 tables)
- Common toolbar: **New**, **Import**, Search/Filters, **Export**.
- Grid with pagination, sort.
- Row actions: View • Edit • Delete (Delete only for admins; wire as enabled for now).
- Drawer Form (react-hook-form + zod):
  - Core fields (per table) +
  - **Dynamic custom fields** (schema from `GET /field-catalog?table=...`).
- Import flow:
  - Step 1: upload CSV -> `POST /{table}:import?dryRun=true`
  - Step 2: Show preview counts {create,update,skip,errors,unknown_headers}.
  - Step 3: If admin wants, toggle “Auto-create fields for unknown headers”.
  - Step 4: Commit -> `POST /{table}:import?dryRun=false&autoCreateFields=...`
- Export button:
  - `GET /{table}:export?filters=...&useKeys=false` (labels by default).
- Validation:
  - Enforce required/unique based on catalog in the UI (zod) and handle server errors gracefully.

### Table specifics
- **Codes**: code, description, category, active (+ custom fields)
- **Contexts**: name, description, tags (+ custom fields)
- **Establishments**: name, type, region, active, notes (+ custom fields)
- **Rules**: name, condition (JSON editor textarea), threshold, enabled (+ custom)

# 4) API contracts (must match)
- Auth (dev): `POST /auth/login` -> `{ token, user }` (optional; for now have a “Dev Login” to set token).
- Field catalog:
  - `GET /field-catalog?table=codes|contexts|establishments|rules`
  - `POST /field-catalog` (create)
  - `PATCH /field-catalog/{id}` (edit/toggle unique/active)
- CRUD per table:
  - `GET /{table}?search&...&page&pageSize`
  - `POST /{table}`
  - `PATCH /{table}/{idOrKey}`
  - `DELETE /{table}/{idOrKey}`
- Import/Export:
  - `POST /{table}:import` (dryRun/commit, autoCreateFields)
  - `GET /{table}:export?filters&useKeys=...`
- Validator (stub ok):
  - `POST /files`, `POST /validations`, `GET /validations`, `GET /validations/{id}`
- Handle 401/403 by redirecting to a basic “Dev Login” page or modal.

# 5) Project structure
src/
  main.tsx
  App.tsx
  routes/
    index.tsx                 # Router setup
  components/
    Sidebar.tsx
    Table.tsx
    Drawer.tsx
    FileDropzone.tsx
    StatCard.tsx
    Toolbar.tsx
    ConfirmDialog.tsx
    JsonEditor.tsx
  features/
    dashboard/DashboardPage.tsx
    validator/UploadPage.tsx
    validator/RunsPage.tsx
    validator/RunDetailsPage.tsx
    validator/AnalyticsPage.tsx
    database/CodesPage.tsx
    database/ContextsPage.tsx
    database/EstablishmentsPage.tsx
    database/RulesPage.tsx
    settings/SettingsPage.tsx
  api/
    client.ts                 # axios instance + interceptors (token)
    queryKeys.ts
    fieldCatalog.ts
    codes.ts
    contexts.ts
    establishments.ts
    rules.ts
    validations.ts
    analytics.ts
  providers/
    QueryProvider.tsx
    AuthProvider.tsx          # in-memory token + role
  hooks/
    useAuth.ts
    useDialog.ts
  lib/
    zodSchemas.ts             # dynamic builders for custom fields
    csv.ts                    # build FormData, etc.
  styles/
    index.css                 # Tailwind base/components/utilities
  utils/
    format.ts, dates.ts

# 6) Sidebar behavior (no header)
- Collapsible groups: “Validator” and “Database”.
- Highlight parent group when on child route; “Run Details” is contextual (don’t add a static item).

# 7) UI/UX details
- Tailwind: rounded-2xl cards, soft shadows, spacious padding.
- Brand colors (optional): background #fbfbfb, accent #f45d48, text #075959.
- Empty states with CTA.
- Toasts for success/error via a lightweight provider.
- Forms: show server validation errors inline (map from API {error:{message,details}}).

# 8) Minimal implementations to deliver
- Working router + sidebar-only layout.
- Each page shows either a working table (CRUD wired) or placeholder content that calls the correct endpoints and handles loading/error states.
- File import preview & commit for all 4 Database tables.
- Field catalog-driven dynamic forms/columns (read catalog and render inputs of type text/number/boolean/date/select/multiselect).
- Analytics charts render if backend returns data; otherwise show friendly empty state.

# 9) Dev notes
- Place a simple “Dev Login” button that calls POST /auth/login with admin@example.com/admin123 and stores token.
- Read VITE_API_BASE_URL; show a small connection chip (healthy/degraded) via /health if provided.

# 10) Acceptance
- Sidebar-only (no header) with items: Dashboard, Validator(Upload,Runs,Analytics), Database(Codes,Contexts,Establishments,Rules), Settings.
- Import (dry run then commit) works for each Database page, showing create/update/skip counts and unknown headers; when “auto-create fields” is toggled, the commit should succeed and the new fields immediately appear as columns/inputs.
- CRUD works for core + custom fields.
- Export downloads CSV with label headers by default.
- Run upload → validation stub returns a run id and links to details.
- Errors are human-friendly; 401/403 handled.
